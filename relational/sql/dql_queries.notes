-----------------------------------------------------------
    Queries (DQL)
-----------------------------------------------------------
- SELECT data from one or more tables or expressions
- includes list of columns to include in result
	- normally immediately after SELECT keyword
	- "*" used to specify all
- may apply optional clauses
	- FROM
		- indicates table(s) to retrieve from
		- can include JOIN subclauses
	- WHERE
		- restrict rows returned by query
		- eliminate rows where predicate is not TRUE
	- GROUP BY
		- projects rows with common value to smaller set of rows
		- applied after WHERE clause
		- queries are initially one group
			- splitting into groups allows aggregate functions to be applied to each separately
				eg. to get MAX value of each group
		- groups must be filtered by HAVING instead of WHERE
			- WHERE is used to filter the all data before grouping
	- HAVING
		- predicate filter for rows resulting from GROUP BY 
		- can use aggregate functions as predicate
	- ORDER BY
		- specify column(s) to sort resulting data
		- specify direction of sorting
		- without ORDER BY order of rows is undefined
	- DISTINT
		- eliminates duplicate data
	- LIMIT
		- specify number of records to return
		- not universally supported
- execution order
	5. SELECT <columns>
	1. FROM <table>
	2. WHERE <predicate on rows>
	3. GROUP BY <columns>
	4. HAVING <predicate on groups>
	6. ORDER BY <columns>
- can have subqueries inside a query
	- can name subqueries WITH
		- called #common table expressions#
	- can recursively refer to themselves
- logical processing order
	- latter steps may refer to aliases in previous steps
	1. FROM
	2. ON
	3. JOIN
	4. WHERE
	5. GROUP BY
	6. WITH CUBE or WITH ROLLUP
	7. HAVING
	8. SELECT
	9. DISTINT
	10. ORDER BY
	11. TOP

-----------------------------------------------------------
    Numerical restriction clauses (WHERE)
-----------------------------------------------------------
- standard numerical operators
	- {=, <, ...}
- [NOT] BETWEEN .. AND ..
	- numerical inclusive range
- [NOT] IN
	- exists in a list
	eg. c1 IN (2,4,5)
- speeds up query since less data have to be returned
