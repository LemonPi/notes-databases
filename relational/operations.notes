-----------------------------------------------------------
    Operations
-----------------------------------------------------------
based on set operations
1. union (R, R)
	- relations must have same set of attributes
	- combines tuples of two relations
	- removes duplicate tuples
	- maps to SQL UNION
2. intersection (R, R)
	- relations must have same set of attributes
	- produce set of tuples two relations share
	- maps to SQL INTERSECT
3. difference (R, R)
	- relations must have same set of attributes
	- produce set of tuples from the first relation not in the second one
	- maps to SQL EXCEPT or MINUS
4. cartesian product (R, S)
	- relations must have disjoint set of attributes
	- produce set of tuples that includes every combination of tuples from the two relations
		- n-tuples x m-tuples produces (n+m)-tuples instead of 2-tuples
	- maps to SQL cross join operator
specific to relational DBs
5. selection (relation)
	- retrieve tuples from a relation restricted to meeting a condition
	- maps to SQL SELECT with a WHERE clause
6. projection (R)
	- extract specified attributes from a set of tuples
	- default map to SQL returns multiset
		- use DISTINT to eliminate duplicate
7. join (R, S)
	- two relations connected by common attributes
	- relational counterpart of AND
	- allows combination of relations associated by a foreign key
		- degenerates to cartesian product when there are no shared attributes
	- maps to SQL INNER JOIN
	- N-1 inner joins required for N tables in an SQL query to avoid cartesian product
8. division (R, S)
	- R attributes must be a superset of S's
	- partition second relation with tuples of first relation
	- not mapped to SQL
	- produces R tuples restricted to unique R attributes such that all their combinations
	of with tuples in S are in R

-----------------------------------------------------------
    Derived Operations
-----------------------------------------------------------
- only need set operations, projection, selection, and rename as primitive operations
- natural join can be simulated from those primitive operations
- theta-join is an inner join with some condition theta {<, ≤, =, >, ≥}
	- R and S (the relations) must have disjoint attributes
	- equivalent to selection(theta)(R x S)
- semijoin is an inner join but do not include attributes of the other relation
	- maintaining relations of R is called a left semijoin
	- equivalent to projection(a1..an)(R join S) where a1..an are attributes of R
- antijoin is like a semijoin but only those tuples for which no tuple in S shares value

-----------------------------------------------------------
    Common Extension Operators
-----------------------------------------------------------
- outer join
	- left, right, full outer joins
	- like inner join
		- but tuples without matching values from the other relation are replaced by NULL
		- instead of removed
	- left outer join has all tuples of R
	- full outer join is left outer join union with right outer join
- extended projection
	- computations on data domains
		eg. multiply numbers from two columns with SELECTION a * b AS c FROM t
- aggregation
	- computing functions on a columns
		- sum
		- count
		- average
		- max
		- min