-----------------------------------------------------------
    Overview
-----------------------------------------------------------
- informally split into sublanguages
	- data query (DQL)
	- data definition (DDL)
	- data control (DCL)
	- data manipulation (DML) 
- there is a standard for SQL, but most SQL implementations do not conform to it...
	- standard does not specify indexes and file storage
- 3 valued logic (3VL)
	- NULL is neither TRUE nor FALSE

-----------------------------------------------------------
    Syntax
-----------------------------------------------------------
- language elements:
	- clauses
		- makes up statements and queries
		- sometimes optional
	- expressions
		- produce either scalar values or tables
	- predicates
		- conditions evaluated to 3VL or bool
		- limit effects of statements and queries
		- change program flow
	- queries
		- retrieve data based on specific criteria
	- statements
		- persistent effect on schemata and data
		- control transactions
		- semicolon terminator
	- whitespace
		- insignificant
-----------------------------------------------------------
    Operators
-----------------------------------------------------------
- =
- <>
	- not equal to
	- many implementations also accept !=
- >
- <
- >=
- <=
- BETWEEN
	- between an inclusive range
- LIKE
	- begins a character pattern
		eg. name LIKE "Will%"
	- contains a character pattern
		eg. name LIKE "%Will%"
- IN
	- equal to one of many
		eg. DeptCode IN (1,2,5)
- IS [NOT] NULL
	- comparison to NULL
- IS [NOT] TRUE or IS [NOT] FALSE
	- comparison to bool
- IS [NOT] DISTINT FROM
	- equal to value or both are nulls
- AS
	- column rename when viewing results
- CASE/WHEN/THEN/ELSE/END expression
	CASE WHEN <predicate>
			THEN <expression>
		WHEN <predicate>
			THEN <expression>
		ELES <expression>
	END
	- always evaluates to an expression
	- introduced in SQL-92
	- called "searched case"
	- can have more than 1 WHEN condition
	- WHEN conditions tested in order
	- if ELSE expression is not specified then SQL defaults to ELSE NULL
	- may use implicit equality comparisons
		eg. WHEN 1
	- 2 short form for special CASE expressions
		1. COALESCE(x1,x2,...)
			CASE WHEN x1 IS NOT NULL THEN x1
				WHEN x2 IS NOT NULL THEN x2
				...
				ELSE xN
			END
			- return value of first non-NULL operand or NULL
			- left to right
		2. NULLIF(x1,x2)
			CASE WHEN x1 = x2 THEN NULL ELSE x1 END

-----------------------------------------------------------
    Queries (DQL)
-----------------------------------------------------------
- SELECT data from one or more tables or expressions
- includes list of columns to include in result
	- normally immediately after SELECT keyword
	- "*" used to specify all
- may apply optional clauses
	- FROM
		- indicates table(s) to retrieve from
		- can include JOIN subclauses
	- WHERE
		- restrict rows returned by query
		- eliminate rows where predicate is not TRUE
	- GROUP BY
		- projects rows with common value to smaller set of rows
		- applied after WHERE clause
	- HAVING
		- predicate filter for rows resulting from GROUP BY 
		- can use aggregate functions as predicate
	- ORDER BY
		- specify column(s) to sort resulting data
		- specify direction of sorting
		- without ORDER BY order of rows is undefined
	- DISTINT
		- eliminates duplicate data
	- LIMIT
		- specify number of records to return
		- not universally supported
- execution order
	5. SELECT <columns>
	1. FROM <table>
	2. WHERE <predicate on rows>
	3. GROUP BY <columns>
	4. HAVING <predicate on groups>
	6. ORDER BY <columns>
- can have subqueries inside a query
	- can name subqueries WITH
		- called #common table expressions#
	- can recursively refer to themselves

-----------------------------------------------------------
    NULL
-----------------------------------------------------------
- represent missing information
- comparison with NULL (=) results in unknown truth value
- 3VL truth tables
	- AND
		- FALSE AND NULL = FALSE
		- otherwise anything AND NULL = NULL
	- OR
		- TRUE OR anything = TRUE
		- NULL OR anything but true = NULL
	- =
		- NULL = anything = NULL
		- so 2 NULLs are not equal to each other
	- NOT
		- NOT NULL = NULL

-----------------------------------------------------------
    Manipulation (DML)
-----------------------------------------------------------
- add, update, and delete data
- INSERT
	- adds rows to an existing table
	eg. INSERT INTO example (c1, c2, c3) VALUES ('test', 'N', NULL);
- UPDATE
	- modifies a set of existing rows
	eg. UPDATE example SET c1 = 'updated' WHERE c2 = 'N';
- DELETE
	- remove existing rows from table
	eg. DELETE FROM example WHERE c2 = 'N';
- MERGE
	- combine data of mutliple tables
	- combines INSERT and UPDATE
	eg. MERGE INTO table USING table_reference ON (condition)
		WHEN MATACHED THEN 
		UPDATE SET c1 = value1 [, c2 = value2 ...]
		WHEN NOT MATCHED THEN
		INSERT (c1 [, c2 ...]) VALUES (value1 [, value2 ...]);
- transactions wrap DML operations
	- START TRANSACTION
		- or BEGIN WORK
		- or BEGIN TRANSACTION
		- depends on implementation
	- SAVE TRANSACTION
		- or SAVEPOINT
		- allows ROLLBACK to a save point
	- COMMIT
		- make all changes in a transaction permanent
	- ROLLBACK
		- discards all changes since last COMMIT or ROLLBACK
	- COMMIT and ROLLBACK ends transaction

-----------------------------------------------------------
    Definition (DDL)
-----------------------------------------------------------
- manages table and index structure
- CREATE
	- creates an object (table)
- ALTER
	- modify structure of an existing object
		eg. adding column to table
		eg. ALTER TABLE example ADD c4 INTEGER NOT NULL;
- TRUNCATE
	- deletes all data from a table very quickly without deleting the table
	- not logged
		- can't be rolled back unlike DELETE
	eg. TRUNCATE TABLE example;
- DROP
	- deletes object permanently
	eg. DROP TABLE exmaple;
- data types
	- defined by standard, but each implementation may have different name/behaviour
	- too many to reasonably implement/list
