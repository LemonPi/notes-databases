-----------------------------------------------------------
    Overview
-----------------------------------------------------------
- core activity is to classify data and identify interrelationships
- most commonly used are relational databases
- a database is an organized set of related data
- acess to a database is provided by database management system (DBMS) software
	- often called database for brevity
- both the database and DBMS conform to a particular database model
	- "database system" refers to the collection (database, database model, DBMS)
	
-----------------------------------------------------------
    Relational Databases
-----------------------------------------------------------
- major entities or subjects become a table
	- sets of tables inside a database
- information items become columns in the table
- each table has primary keys which is a column or set of columns
	- uniquely identifies each row
	- most efficient querying method
- foreign key is a unique reference from one row to another row
	- can be rows from different tables
- SQL is the langauge for managing data in relational DBs

-----------------------------------------------------------
    NoSQL
-----------------------------------------------------------
- alternatives to relational databases
	- data not modelled as tabular relations
		- key-value
		- wide column
		- graph
		- document
- united only in their rejection of the relational model
- motivation
	- simplicity
	- horizontal scaling to more machines
	- finer control on availability
- weakness is consistency
	- database changes are slowly propagated
	- queries might be on old data
	- data loss and lost writes

-----------------------------------------------------------
    ORM
-----------------------------------------------------------
- specific library for a particularly language
	eg. SQLAlchemy and Django ORM for python
	- probably better to learn SQL since it's language independent
- object relational mapping
- converts data between incompatible type systems
	- DBs often can only store scalar values
	- translate logical representation of objects into atomized form
		- object can be reloaded
		- persistent objects
- point is to reduce boiler plate code
- high abstraction may lead to poor design